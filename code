provider "aws" {
  region = "ap-south-1"
  profile = "myojas"
}


resource "tls_private_key" "privatekey" {
  algorithm   = "RSA"
  ecdsa_curve = "2048"
}


resource "local_file" "key_pair"{
    depends_on = [tls_private_key.privatekey, ]
    content = tls_private_key.privatekey.private_key_pem
    filename = "key111.pem"
}


resource "aws_key_pair" "publickey"{
    depends_on = [local_file.key_pair, ]
    key_name = "key111"
    public_key =  tls_private_key.privatekey.public_key_openssh
}

resource "aws_vpc" "myvpc" {
  cidr_block       = "192.168.0.0/16"
  instance_tenancy = "default"

  tags = {
    Name = "myvpc"
  }
}


resource "aws_subnet" "subnet1a" {
  vpc_id     = aws_vpc.myvpc.id
  cidr_block = "192.168.0.0/24"
  availability_zone = "ap-south-1a"
  tags = {
    Name = "subnet1a" 
  }
}



resource "aws_internet_gateway" "IGW" {
  vpc_id = aws_vpc.myvpc.id

  tags = {
    Name = "IGW"
  }
}


resource "aws_route_table" "igwrt" {
  vpc_id = aws_vpc.myvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.IGW.id
  }

  tags = {
    Name = "igwrt"
  }
}


resource "aws_route_table_association" "rtassociation" {
  subnet_id      = aws_subnet.subnet1a.id
  route_table_id = aws_route_table.igwrt.id
}





resource "aws_security_group" "sg" {
  depends_on  = [ aws_vpc.myvpc ]
  name        = "sg"
  description = "http inbound traffic"
  vpc_id  =  aws_vpc.myvpc.id
  
  ingress {
    description = "SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "http"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "NFS"
    from_port   = 2049
    to_port     = 2049
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "sg"
  }
}


resource "aws_instance" "myinstance" {
  ami   = "ami-0447a12f28fddb066"
  instance_type  =  "t2.micro"
  key_name = "key111"
  subnet_id   =  aws_subnet.subnet1a.id
  vpc_security_group_ids = [ aws_security_group.sg.id ]
  
  tags = {
    Name = "myinstance"
  } 

  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = tls_private_key.privatekey.private_key_pem
    host     = aws_instance.myinstance.public_ip
  }


  provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd  php git -y",
      "sudo systemctl restart httpd",
      "sudo systemctl enable httpd",
    ]
  }
}


resource "aws_efs_file_system" "myefs" {
  creation_token = "myefs"

  tags = {
    Name = "myefs"
  }
}

resource "aws_efs_mount_target" "mount_vol" {
  file_system_id = aws_efs_file_system.myefs.id
  subnet_id      = aws_subnet.subnet1a.id
}


resource "null_resource" "nulllocal2"  {
	provisioner "local-exec" {
	    command = "echo  ${aws_instance.myinstance.public_ip} > publicip.txt"
  	}
}


resource "null_resource" "nullremote3"  {

depends_on = [
    aws_efs_mount_target.mount_vol,
  ]

  connection {
        type = "ssh"
        user  = "ec2-user"
        private_key = tls_private_key.privatekey.private_key_pem
        host = aws_instance.myinstance.public_ip
  }



  provisioner "remote-exec" {
    inline = [
      "sudo mkfs.ext4  /dev/xvdh",
      "sudo mount  /dev/xvdh  /var/www/html",
      "sudo rm -rf /var/www/html/*",
      "sudo git clone https://github.com/Ojaswini235/html.git /var/www/html"
    ]
  }
}


resource "aws_s3_bucket" "task-buck2" {
  bucket = "task-buck2"
  acl = "public-read"
  force_destroy = true  
  
  depends_on = [
    aws_efs_mount_target.mount_vol,
  ]
}


resource "aws_s3_bucket_object" "obj" {
  key = "image.jpg"
  bucket = aws_s3_bucket.task-buck2.id
  source = "D:/minions.jpg"
  content_type = "image/jpg" 
  acl = "public-read"
}


locals {
  s3_origin_id = "myS3Origin"
}


resource "aws_cloudfront_origin_access_identity" "origin_access_identity" {
  comment = "origin_access_identity"
}



resource "aws_cloudfront_distribution" "task2-s3" {

  depends_on = [
    aws_s3_bucket_object.obj
  ]

  origin {
    domain_name = aws_s3_bucket.task-buck2.bucket_regional_domain_name
    origin_id   = local.s3_origin_id

    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path
    }
  }

  enabled  = true

  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = local.s3_origin_id

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }
    viewer_protocol_policy = "allow-all"
    min_ttl = 0
    default_ttl = 3600
    max_ttl = 86400
  }
  

  restrictions {
    geo_restriction {
      restriction_type = "none"
      
    }
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }
 
  connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = tls_private_key.privatekey.private_key_pem
    host     = aws_instance.myinstance.public_ip
  }

 provisioner "remote-exec" {
    inline = [
      "sudo su << EOF",
      "echo \"<img src='http://${self.domain_name}/${aws_s3_bucket_object.obj.key}'>\" >> /var/www/html/index.html",
      "EOF"
    ]
  }

}


resource "null_resource" "nulloc" {
  depends_on = [ null_resource.nullremote3,aws_cloudfront_distribution.task2-s3,aws_s3_bucket.task-buck2,
  ]

  provisioner "local-exec" {
    command = " start http://${aws_instance.myinstance.public_ip}"
  }
}


